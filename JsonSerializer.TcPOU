<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="JsonSerializer" Id="{a4623321-e5e2-4514-b5b7-6f50c93efdb9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'Direct call is not allowed'} 
FUNCTION_BLOCK JsonSerializer EXTENDS TwinCAT_OpenFramework_Core.Object
VAR
	_ClassName : STRING := __POUNAME();
	
	_JsonSaxWriter : Tc3_JsonXml.FB_JsonSaxPrettyWriter;
	_JsonDataTypeWriter : Tc3_JsonXml.FB_JsonReadWriteDatatype;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{0ef034e0-c59c-400d-8910-5199a1e43c28}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING
]]></Declaration>
      <Get Name="Get" Id="{7d8e441f-d9e1-4fe6-a84f-2d3a88ae1b83}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CreateJsonFromStructure" Id="{31848662-d9bf-4aea-a3a4-edcfc8404635}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD CreateJsonFromStructure 
VAR_INPUT
	structureAddress : PVOID;
	structureSize : UDINT;
END_VAR
VAR_IN_OUT CONSTANT
    targetString : JSON_DOCUMENT;
END_VAR
VAR_OUTPUT
	jsonSize : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CreateJsonFromStructureEx(structureAddress, structureSize, 0, targetString, jsonSize => jsonSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateJsonFromStructureEx" Id="{defd30bb-3636-4b3d-a29d-4ee5f3966212}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD CreateJsonFromStructureEx
VAR_INPUT
	structureAddress : PVOID;
	structureSize : UDINT;
	extender : IJsonExtender;
END_VAR
VAR_IN_OUT CONSTANT
    targetString : JSON_DOCUMENT;
END_VAR
VAR_OUTPUT
	jsonSize : UDINT; 
END_VAR
VAR
	//exceptionFactory : ExceptionFactory(__POUNAME(), ClassName, CurrentNamespace.Name);
	structureTypeName : STRING;	 
	errorCode : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF structureAddress = 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Structure address is not specified");
END_IF

IF structureSize = 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Structure size is not specified");
END_IF

_JsonSaxWriter.ResetDocument();

structureTypeName := _JsonDataTypeWriter.GetDatatypeNameByAddress(structureSize, structureAddress, hrErrorCode => errorCode);

IF errorCode <> 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Can't get structure type name of transfered symbol (structure instance address and size)", TO_UDINT(errorCode));
END_IF

IF extender <> 0 THEN
	extender.ExtendAtStart(_JsonSaxWriter);
END_IF

IF NOT _JsonDataTypeWriter.AddJsonValueFromSymbol(_JsonSaxWriter, structureTypeName, structureSize, structureAddress, hrErrorCode => errorCode) THEN
	//exceptionFactory.ThrowException(__POSITION(), WStringHelper.Concat3("Can't generate JSON representation from the symbol of type '", TO_WSTRING(structureTypeName), "'"), TO_UDINT(errorCode));
END_IF

IF extender <> 0 THEN
	extender.ExtendAtFinish(_JsonSaxWriter);
END_IF

jsonSize := _JsonSaxWriter.CopyDocument(targetString, SIZEOF(targetString), hrErrorCode => errorCode);

IF errorCode <> 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), WStringHelper.Concat3("Can't generate JSON representation from the symbol of type '", TO_WSTRING(structureTypeName), "'"), TO_UDINT(errorCode));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetFormatOptions" Id="{c6cdde79-cf05-4b34-97ff-f0f4810b70ea}">
      <Declaration><![CDATA[METHOD PRIVATE SetFormatOptions
VAR_INPUT
	decimalPlaces : BYTE := 10;
	formatOptions : EJsonPrettyFormatOptions := EJsonPrettyFormatOptions.eFormatSingleLineArray;
	identChar : SINT := 9;
	identCharCount : BYTE := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_JsonSaxWriter.SetMaxDecimalPlaces(decimalPlaces);
_JsonSaxWriter.SetFormatOptions(formatOptions);
_JsonSaxWriter.SetIndent(identChar, identCharCount);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetStructureFromJson" Id="{b53042c3-1eea-4151-a973-f56939241dea}">
      <Declaration><![CDATA[METHOD SetStructureFromJson
VAR_IN_OUT CONSTANT
	json : JSON_DOCUMENT;	
END_VAR
VAR_INPUT
	structureAddress : PVOID;
	structureSize : UDINT;
END_VAR
VAR
	//exceptionFactory : ExceptionFactory(__POUNAME(), ClassName, CurrentNamespace.Name);
	structureTypeName : STRING;	 
	errorCode : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF structureAddress = 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Structure address is not specified");
END_IF

IF structureSize = 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Structure size is not specified");
END_IF

structureTypeName := _JsonDataTypeWriter.GetDatatypeNameByAddress(structureSize, structureAddress, hrErrorCode => errorCode);

IF errorCode <> 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Can't get structure type name of transfered symbol (structure instance address and size)", TO_UDINT(errorCode));
END_IF

_JsonDataTypeWriter.SetSymbolFromJson(json, structureTypeName, structureSize, structureAddress, hrErrorCode => errorCode);

IF errorCode <> 0 THEN
	//exceptionFactory.ThrowException(__POSITION(), "Can't set structure by specified json document", TO_UDINT(errorCode));
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>